/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var p=Object.defineProperty;var w=Object.getOwnPropertyDescriptor;var E=Object.getOwnPropertyNames;var b=Object.prototype.hasOwnProperty;var u=(o,e)=>{for(var s in e)p(o,s,{get:e[s],enumerable:!0})},y=(o,e,s,n)=>{if(e&&typeof e=="object"||typeof e=="function")for(let t of E(e))!b.call(o,t)&&t!==s&&p(o,t,{get:()=>e[t],enumerable:!(n=w(e,t))||n.enumerable});return o};var m=o=>y(p({},"__esModule",{value:!0}),o);var g={};u(g,{default:()=>r});module.exports=m(g);var i=require("obsidian"),c="bookshelf-view",r=class extends i.Plugin{async onload(){this.registerView(c,e=>new h(e)),this.addCommand({id:"open-bookshelf",name:"Open Bookshelf View",callback:()=>this.activateBookshelf()})}onunload(){this.app.workspace.detachLeavesOfType(c)}activateBookshelf(){let e=this.app.workspace.getRightLeaf(!1);if(!e){console.warn("Bookshelf View: No available leaf to open view.");return}e.setViewState({type:c,active:!0}),this.app.workspace.revealLeaf(e)}},h=class extends i.ItemView{constructor(e){super(e)}getViewType(){return c}getDisplayText(){return"Bookshelf View"}async onOpen(){this.renderBookshelf()}async onClose(){this.containerEl.empty()}async renderBookshelf(){this.containerEl.empty();let e=this.app.vault.getMarkdownFiles(),s={};e.forEach(t=>{let a=t.path.split("/")[0]||"Root";s[a]=s[a]||[],s[a].push(t.path)});let n=this.containerEl.createDiv({cls:"bookshelf"});Object.entries(s).forEach(([t,a])=>{let f=n.createDiv({cls:"shelf"});f.createEl("h3",{text:t});let d=f.createDiv({cls:"books"});a.forEach(l=>{let k=d.createDiv({cls:"book"}),v=l.replace(/.*\/(.*)\.md$/,"$1");k.createEl("span",{text:v}),k.onClickEvent(()=>this.app.workspace.openLinkText(l,l,!1))})})}};
